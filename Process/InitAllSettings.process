<?xml version="1.0" encoding="utf-8"?>
<Root>
  <DesignerItems>
    <DesignerItem>
      <Left>700</Left>
      <Top>700</Top>
      <Width>70</Width>
      <Height>70</Height>
      <ID>86f986ca-4deb-4a12-9c88-157c7019b26d</ID>
      <zIndex>0</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Старт" InternalName="Start" FriendlyName="С блока Старт начинается работа диаграммы. В диаграмме может быть только один такой блок." Width="70" Height="70" PathToImage="ExternalToolboxes\Image\ico_Process Start.png" PathToToolboxImage="ExternalToolboxes\Image\icotb_Process Start.png" ImageType="OnlyImage" NoDelete="False" Invisible="False" Proportional="True" Version="10" LinuxAvailable="True" Code="&amp;#xA;function Start{{{block_id}}}&amp;#xA;{                  &amp;#xA;    try&amp;#xA;    {&amp;#xA;    $currentblockid = &amp;quot;{{{block_native_id}}}&amp;quot;;   &amp;#xA;    &amp;#xA;        $Value        = {{{Value}}};&amp;#xA;        $SendOrkest   = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot = ${{{IsScreenshot}}};&amp;#xA;        &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;             &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;Info&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        if($val.Length -gt 0)&amp;#xA;        {&amp;#xA;            $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;            try&amp;#xA;            {&amp;#xA;                $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;            }&amp;#xA;            catch{} &amp;#xA;            Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }&amp;#xA;    &amp;#xA;    try&amp;#xA;    {&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable1}}} = {{{Expression1}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable1: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable2}}} = {{{Expression2}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable2: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable3}}} = {{{Expression3}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable3: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable4}}} = {{{Expression4}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable4: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable5}}} = {{{Expression5}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable5: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        &amp;#xA;    }&amp;#xA;    catch {}&amp;#xA;    &amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    &amp;#xA;    $script:__NextBlockID = &amp;quot;{{{connector-Next}}}&amp;quot;;&amp;#xA;}                   &amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="32"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Записать в лог" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable1" Tooltip="[Переменная] Имя первой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Переменная 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression1" Tooltip="[Любой тип данных] Новое значение первой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Значение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable2" Tooltip="[Переменная] Имя второй переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Переменная 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Любой тип данных] Новое значение второй переменной. Свойство игнорируется, если не задано имя второй переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Значение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable3" Tooltip="[Переменная] Имя третьей переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Переменная 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Любой тип данных] Новое значение третьей переменной. Свойство игнорируется, если не задано имя третьей переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Значение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable4" Tooltip="[Переменная] Имя четвертой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Переменная 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Любой тип данных] Новое значение четвертой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Значение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable5" Tooltip="[Переменная] Имя пятой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Переменная 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Любой тип данных] Новое значение пятой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Значение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="" Caption="Логировать в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="{x:Null}" EnumVariants="" Caption="Скриншот в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Handle&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorDirection" Tooltip="Выбор направления выхода из блока при возникновении ошибки. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Right&amp;quot; - направо; &amp;quot;Bottom&amp;quot; - вниз. Данное свойство позволяет определить направление выхода при возникновении ошибок для блоков не содержащих коннектора &amp;quot;Если ошибка&amp;quot; (например блок &amp;quot;Условие&amp;quot;). Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Bottom&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="Default;Right;Bottom" Caption="Направление выхода" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Debug&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="{x:Null}" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>635</Left>
      <Top>820</Top>
      <Width>200</Width>
      <Height>75</Height>
      <ID>89dbff24-b106-4297-8539-28d6f821ddaa</ID>
      <zIndex>2</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Загрузить таблицу из config файла (Settings)" InternalName="LoadDataTable" FriendlyName="ЗагрузитьТаблицу Данных из Excel-документа " Width="200" Height="75" PathToImage="ExternalToolboxes\Image\Excel.ico" PathToToolboxImage="{x:Null}" ImageType="LeftImage" NoDelete="False" Invisible="False" Proportional="True" Version="112" LinuxAvailable="True" Code="&amp;#xA;function LoadDataTable{{{block_id}}}&amp;#xA;{        &amp;#xA; try&amp;#xA; {&amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;);&amp;#xA;    &amp;#xA;    $ExcelPath       = {{{Path}}};&amp;#xA;    $hasHeader       = ${{{HasHeader}}};        &amp;#xA;    $Worksheet       = {{{Worksheet}}};&amp;#xA;    $ReadPasswordObj = {{{ReadPassword}}};  &amp;#xA;    $OutTable        = {{{Table}}};&amp;#xA;        &amp;#xA;        $ExcelPath = ExpandConstFilePath $ExcelPath &amp;#xA;        &amp;#xA;        if(![System.IO.File]::Exists($ExcelPath))&amp;#xA;        {&amp;#xA;            $__Error.Exception(&amp;quot;ERRORCONST_PATHNOTFOUND: $ExcelPath&amp;quot;);&amp;#xA;            return;&amp;#xA;        } &amp;#xA;         &amp;#xA;        $stream = [System.IO.FileStream]::new($ExcelPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite);&amp;#xA;        &amp;#xA;        $readerconf = $null;   &amp;#xA;        &amp;#xA;        $ReadPassword = _checkpassword($ReadPasswordObj);&amp;#xA;            &amp;#xA;        if(-not [string]::IsNullOrEmpty($ReadPassword))&amp;#xA;        {    &amp;#xA;            $readerconf          = [ExcelDataReader.ExcelReaderConfiguration]::new();&amp;#xA;            $readerconf.Password = $ReadPassword;&amp;#xA;        }&amp;#xA;        &amp;#xA;        $reader = [ExcelDataReader.ExcelReaderFactory]::CreateReader($stream, $readerconf);&amp;#xA;&amp;#xA;        $datasetconf = [ExcelDataReader.ExcelDataSetConfiguration]::new();&amp;#xA;        $datatableconf = [ExcelDataReader.ExcelDataTableConfiguration]::new();&amp;#xA;        $datatableconf.UseHeaderRow = $hasHeader;&amp;#xA;        $datasetconf.UseColumnDataType = $false;&amp;#xA;        $datasetconf.ConfigureDataTable = [System.Func[ExcelDataReader.IExcelDataReader, ExcelDataReader.ExcelDataTableConfiguration]]{param($x) $datatableconf };&amp;#xA;&amp;#xA;        $ds = [ExcelDataReader.ExcelDataReaderExtensions]::AsDataSet($reader, $datasetconf);&amp;#xA;               &amp;#xA;        [System.Data.DataTable]$tableresult = $null;&amp;#xA;        if($Worksheet.GetType().Name -eq &amp;quot;String&amp;quot;)&amp;#xA;        {&amp;#xA;            foreach($table in $ds.Tables)&amp;#xA;            {&amp;#xA;                if($table.TableName -eq $Worksheet)&amp;#xA;                {&amp;#xA;                    $tableresult = $table;&amp;#xA;                    break;&amp;#xA;                }&amp;#xA;            }&amp;#xA;        }&amp;#xA;        else&amp;#xA;        {     &amp;#xA;            $Worksheet--;&amp;#xA;            if($Worksheet -lt 0) { $Worksheet = 0; }&amp;#xA;            if($Worksheet -ge $ds.Tables.Count) { $Worksheet = $ds.Tables.Count - 1; }&amp;#xA;            for($ind = 0; $ind -lt $ds.Tables.Count; $ind++)&amp;#xA;            {&amp;#xA;                $tableresult = $ds.Tables[$ind];&amp;#xA;                $propvalue = [string]$tableresult.ExtendedProperties[&amp;quot;visiblestate&amp;quot;];&amp;#xA;                if($propvalue.Contains(&amp;quot;hidden&amp;quot;))&amp;#xA;                {&amp;#xA;                    continue;&amp;#xA;                }&amp;#xA;                $Worksheet--;&amp;#xA;                if($Worksheet -lt 0) { break; }&amp;#xA;            }&amp;#xA;        } &amp;#xA;        &amp;#xA;        $ds.Dispose();&amp;#xA;        $reader.Dispose();&amp;#xA;        $stream.Dispose();&amp;#xA;        &amp;#xA;        if(!$tableresult)&amp;#xA;        {&amp;#xA;            $__Error.Exception(&amp;quot;Not found Worksheet: &amp;quot; + $Worksheet);&amp;#xA;            return;&amp;#xA;        } &amp;#xA;        &amp;#xA;        if($OutTable)&amp;#xA;        {        &amp;#xA;            try&amp;#xA;            {&amp;#xA;                $dtCloned = $tableresult.Clone();&amp;#xA;                foreach($column in $OutTable.Columns)&amp;#xA;                {&amp;#xA;                    if($dtCloned.Columns.Contains($column.ColumnName))&amp;#xA;                    {&amp;#xA;                        $dtCloned.Columns[$column.ColumnName].DataType = $column.DataType;&amp;#xA;                    }&amp;#xA;                }&amp;#xA;&amp;#xA;                foreach($row in $tableresult.Rows)&amp;#xA;                {&amp;#xA;                    $dtCloned.ImportRow($row);&amp;#xA;                }&amp;#xA;&amp;#xA;                $OutTable = $dtCloned; &amp;#xA;            } &amp;#xA;            catch&amp;#xA;            {&amp;#xA;                $OutTable = $tableresult;&amp;#xA;            }&amp;#xA;        }&amp;#xA;        else &amp;#xA;        {&amp;#xA;            $OutTable = $tableresult;&amp;#xA;        }&amp;#xA;        &amp;#xA;        {{{Table}}} = $OutTable; &amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_);&amp;#xA;        return;&amp;#xA;    }                  &amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="Table" Tooltip="[Таблица Данных] Таблица данных, в которую будут загружены данные из Excel-документа" CatalogName="Output" Type="Variable" Value="$Table" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="DataTable" EnumVariants="{x:Null}" Caption="Таблица Данных" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Path" Tooltip="[Текст] Путь к Excel-документу, из которого необходимо загрузить информацию в Таблицу Данных. Для этого блока не нужно предварительно открывать файл с помощью блока &amp;quot;Открыть документ&amp;quot;" CatalogName="Required" Type="Expression" Value="&amp;quot;Data\Config.xlsx&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="Путь к файлу" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="HasHeader" Tooltip="Если галочка установлена, то первая строка будет использована в качестве заголовка. В противном случае - заголовок будет отсутствовать." CatalogName="Main properties" Type="Bool" Value="True" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Заголовок" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Worksheet" Tooltip="[Число/Текст] ID(порядковый номер) или название листа, данные из которого необходимо прочитать в Таблицу Данных. Нумерация начинается с 1" CatalogName="Required" Type="Expression" Value="&amp;quot;Settings&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Number/Text" EnumVariants="{x:Null}" Caption="Лист" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="ReadPassword" Tooltip="[Текст/SecureString] Укажите пароль для чтения документа, если он был указан при сохранении" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text/SecureString" EnumVariants="" Caption="Пароль для чтения" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>660</Left>
      <Top>950</Top>
      <Width>150</Width>
      <Height>150</Height>
      <ID>41b58bea-54f3-4b88-a3cb-5527cf8afa45</ID>
      <zIndex>12</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Цикл для каждого (Таблица Данных)" InternalName="ForeachRows" FriendlyName="Циклично перебираются все строки Таблицы Данных, которые выводятся в отдельный коннектор. После перебора всех строк таблицы выполнение сценария продолжается в сторону нижнего выхода блока. Не забудьте соединить выход последнего блока в теле цикла со входом данного блока" Width="150" Height="150" PathToImage="ExternalToolboxes\Image\icotb_Foreach datatable simple.png" PathToToolboxImage="ExternalToolboxes\Image\icotb_Foreach datatable.png" ImageType="TopImageDock" NoDelete="False" Invisible="False" Proportional="True" Version="15" LinuxAvailable="True" Code="&amp;#xA;function ForeachRows{{{block_id}}}&amp;#xA;{     &amp;#xA;    try&amp;#xA;    {&amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;);&amp;#xA;    &amp;#xA;        if($script:__FuncIndex -gt $script:__LastFuncIndex) &amp;#xA;        { &amp;#xA;            $script:__Index{{{block_id}}} = 0; &amp;#xA;        }&amp;#xA;             &amp;#xA;        if ($script:__Index{{{block_id}}} -lt {{{Table}}}.Rows.Count)&amp;#xA;        {       &amp;#xA;            {{{Row}}} = {{{Table}}}.Rows[$script:__Index{{{block_id}}}];  &amp;#xA;            {{{RowIndex}}} = $script:__Index{{{block_id}}};&amp;#xA;                       &amp;#xA;            $script:__Index{{{block_id}}} = $script:__Index{{{block_id}}} + 1;&amp;#xA;                         &amp;#xA;            $__Error.Jump(&amp;quot;{{{connector-Row}}}&amp;quot;);&amp;#xA;            return;&amp;#xA;        }  &amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_);&amp;#xA;        return;&amp;#xA;    }&amp;#xA;    $script:__Index{{{block_id}}} = 0;&amp;#xA;    $__Error.Quit();&amp;#xA;}&amp;#xA;" TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,10L20,0 40,10 20,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,10L20,0 40,10 20,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="Table" Tooltip="[Таблица Данных] Таблица данных, в которой перебираются строки" CatalogName="Required" Type="Variable" Value="$Table" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="DataTable" EnumVariants="" Caption="Таблица" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="Row" Tooltip="[Ссылка] Возвращается ссылка на строку" CatalogName="Output" Type="Variable" Value="$Row" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Reference" EnumVariants="" Caption="Строка" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="RowIndex" Tooltip="[Число] Порядковый номер строки. Нумерация начинается с нуля" CatalogName="Output" Type="Variable" Value="$RowIndex" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Number" EnumVariants="" Caption="Индекс строки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorDirection" Tooltip="Выбор направления выхода из блока при возникновении ошибки. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Right&amp;quot; - направо; &amp;quot;Bottom&amp;quot; - вниз. Данное свойство позволяет определить направление выхода при возникновении ошибок для блоков не содержащих коннектора &amp;quot;Если ошибка&amp;quot; (например блок &amp;quot;Условие&amp;quot;). Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Right;Bottom" Caption="Направление выхода" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Row" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FF008000" Caption="Строка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>895</Left>
      <Top>975</Top>
      <Width>100</Width>
      <Height>100</Height>
      <ID>05f4650d-7bb2-454d-890f-3a2d300c3f50</ID>
      <zIndex>9</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Если ключ-значение не пустое" InternalName="IfCondition" FriendlyName="Блок проверяет указанное условие на истинность и, в зависимости от результата, выполнение сценария продолжается в сторону выхода &amp;quot;Да&amp;quot; (условие выполнилось) или &amp;quot;Нет&amp;quot; (условие не выполнилось). Например, условие $a == &amp;quot;Привет&amp;quot; проверяет, равно ли значение переменной $a значению &amp;quot;Привет&amp;quot;, а условие $Result &amp;gt; 5 проверяет, превышает ли значение переменной $Result значение 5. Условие может содержать математические и логические операции, константы, функции, другие переменные и т.д. Примеры выражений, которые можно использовать в условиях, доступны по нажатию на кнопку ... рядом со свойством Условие." Width="100" Height="100" PathToImage="" PathToToolboxImage="ExternalToolboxes\Image\icotb_If condition.png" ImageType="NoImage" NoDelete="False" Invisible="False" Proportional="True" Version="46" LinuxAvailable="True" Code="&amp;#xA;function IfCondition{{{block_id}}}&amp;#xA;{&amp;#xA; try&amp;#xA; {&amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;); &amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;);&amp;#xA;   &amp;#xA;        if ({{{Condition}}}) &amp;#xA;        {&amp;#xA;            $__Error.Jump(&amp;quot;{{{connector-Yes}}}&amp;quot;);&amp;#xA;            return;&amp;#xA;        }&amp;#xA;        else&amp;#xA;        {   &amp;#xA;            $__Error.Jump(&amp;quot;{{{connector-No}}}&amp;quot;);&amp;#xA;            return;&amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_); &amp;#xA;        return;&amp;#xA;    } &amp;#xA;    $__Error.Quit();&amp;#xA;}&amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,10L20,0 40,10 20,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,10L20,0 40,10 20,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="Condition" Tooltip="[Любое выражение] В зависимости от значения этого выражения выполнение сценария продолжится по выходу &amp;quot;Да&amp;quot; или &amp;quot;Нет&amp;quot;. Значение выражения, эквивалентное 0 (нулю) или $False приравнивается к &amp;quot;Нет&amp;quot;, все остальные значения - приравниваются к &amp;quot;Да&amp;quot;. Например, если в переменную $a было ранее записано значение 5, то условие $a&amp;gt;2 является истинным, а условие $a == 6 является ложным." CatalogName="Main properties" Type="Expression" Value="([string]$Row[&amp;quot;Name&amp;quot;]) -ne &amp;quot;&amp;quot; -and&amp;#xA;([string]$Row[&amp;quot;Value&amp;quot;]) -ne &amp;quot;&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any Expression" EnumVariants="{x:Null}" Caption="Условие" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorDirection" Tooltip="Выбор направления выхода из блока при возникновении ошибки. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Right&amp;quot; - направо; &amp;quot;Bottom&amp;quot; - вниз. Данное свойство позволяет определить направление выхода при возникновении ошибок для блоков не содержащих коннектора &amp;quot;Если ошибка&amp;quot; (например блок &amp;quot;Условие&amp;quot;). Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Right;Bottom" Caption="Направление выхода" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="No" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Нет" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Yes" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF008000" Caption="Да" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>895</Left>
      <Top>1145</Top>
      <Width>100</Width>
      <Height>100</Height>
      <ID>f341eca0-0a70-442a-b977-439e47ceb937</ID>
      <zIndex>8</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Записать ключ-значение" InternalName="InvokeExpression" FriendlyName="Выполнение одного или нескольких выражений на языке, совместимом с PowerShell. Выражения записываются без кавычек" Width="100" Height="100" PathToImage="ExternalToolboxes\Image\ico_Invoke Expression.png" PathToToolboxImage="" ImageType="TopImage" NoDelete="False" Invisible="False" Proportional="True" Version="66" LinuxAvailable="True" Code="&amp;#xA;function InvokeExpression{{{block_id}}}&amp;#xA;{      &amp;#xA;    try&amp;#xA;    {  &amp;#xA;        $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;); &amp;#xA;        $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;);&amp;#xA;        try&amp;#xA;        { &amp;#xA;            {{{Expression1}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression1: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression2}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression2: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression3}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression3: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression4}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression4: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression5}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression5: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;    }&amp;#xA;    catch { }&amp;#xA;        &amp;#xA;&amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="16"&gt;&lt;Property Name="Expression1" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="$out_Config[[string]$Row[&amp;quot;Name&amp;quot;]] = ([string]$Row[&amp;quot;Value&amp;quot;]).Trim()" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 6" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 7" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 8" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 9" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 10" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>1035</Left>
      <Top>915</Top>
      <Width>20</Width>
      <Height>20</Height>
      <ID>059aa3c2-aaf4-4825-9dd3-1c927b79a8ea</ID>
      <zIndex>5</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Коннектор" InternalName="PointConnector" FriendlyName="Коннектор" Width="20" Height="20" PathToImage="" PathToToolboxImage="" ImageType="NoImage" NoDelete="False" Invisible="True" Proportional="True" Version="12" LinuxAvailable="True" Code="&amp;#xA;function PointConnector{{{block_id}}}&amp;#xA;{                &amp;#xA;    &amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="0" /&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="InOut" Orientation="None" RelativePosition="0.5,0.5" MaxInConnections="100" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>700</Left>
      <Top>1290</Top>
      <Width>70</Width>
      <Height>70</Height>
      <ID>28b58ffc-a6c2-4c5d-9f10-3768380dabd3</ID>
      <zIndex>14</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Конец" InternalName="ReturnOrStop" FriendlyName="Блок обозначает завершение работы сценария или возврат из диаграммы подпроцесса в основной процесс. В диаграмме можно использовать более одного блока Конец. В диаграмме подпроцесса должен быть хотя бы один такой блок, иначе после завершения работы подпроцесса не произойдёт возврат в основной процесс." Width="70" Height="70" PathToImage="ExternalToolboxes\Image\ico_Process Stop.png" PathToToolboxImage="ExternalToolboxes\Image\icotb_Process Stop.png" ImageType="OnlyImage" NoDelete="False" Invisible="False" Proportional="True" Version="113" LinuxAvailable="True" Code="&amp;#xA;function ReturnOrStop{{{block_id}}}&amp;#xA;{       &amp;#xA;    try&amp;#xA;    {&amp;#xA;    $currentblockid = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;       &amp;#xA;        $Value        = {{{Value}}};&amp;#xA;        $SendOrkest   = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot = ${{{IsScreenshot}}};&amp;#xA;        &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;             &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;Info&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        if($val.Length -gt 0)&amp;#xA;        {&amp;#xA;            $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;            try&amp;#xA;            {&amp;#xA;                $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;            }&amp;#xA;            catch{} &amp;#xA;            Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }&amp;#xA;    &amp;#xA;    try&amp;#xA;    {&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable1}}} = {{{Expression1}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable1: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable2}}} = {{{Expression2}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable2: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable3}}} = {{{Expression3}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable3: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable4}}} = {{{Expression4}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable4: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable5}}} = {{{Expression5}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable5: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA; &amp;#xA;    }&amp;#xA;    catch {}&amp;#xA;    &amp;#xA;    $__Error.Quit(); &amp;#xA;    try&amp;#xA;    {    &amp;#xA;        $script:__NextBlockID = &amp;quot;&amp;quot;;&amp;#xA;        $ProcessContainer = &amp;quot;&amp;quot;; &amp;#xA;        if ($script:__callstack.Count -gt 0)&amp;#xA;        {&amp;#xA;            $stackitem = $script:__callstack.Pop();&amp;#xA;            $script:__NextBlockID = $stackitem.ConnectorNext;&amp;#xA;            $ProcessContainer = $stackitem.ProcessContainer;&amp;#xA;            while($script:__NextBlockID.Length -eq 0)&amp;#xA;            {       &amp;#xA;                if ($script:__callstack.Count -eq 0) { break; } &amp;#xA;                $containerName = $stackitem.ProcessContainer;&amp;#xA;                if($containerName.StartsWith(&amp;quot;TryCatchContainer&amp;quot;) -or $containerName.StartsWith(&amp;quot;CollapseContainer&amp;quot;))&amp;#xA;                {&amp;#xA;                    $__Error.Quit();&amp;#xA;                    $stackitem = $script:__callstack.Pop();&amp;#xA;                    $script:__NextBlockID = $stackitem.ConnectorNext;  &amp;#xA;                    $ProcessContainer = $stackitem.ProcessContainer;&amp;#xA;                }&amp;#xA;                else&amp;#xA;                {&amp;#xA;                    break;&amp;#xA;                }&amp;#xA;            } &amp;#xA;                       &amp;#xA;            if($script:__RobotFileVersion -eq &amp;quot;125&amp;quot;)&amp;#xA;            {        &amp;#xA;                if($ProcessContainer.StartsWith(&amp;quot;TryCatchContainer&amp;quot;) -or $ProcessContainer.StartsWith(&amp;quot;CollapseContainer&amp;quot;))&amp;#xA;                {&amp;#xA;                &amp;#xA;                }&amp;#xA;                else&amp;#xA;                {&amp;#xA;                    try&amp;#xA;                    { &amp;#xA;                        $callOut = $ProcessContainer + &amp;quot;Out&amp;quot;; &amp;amp;$callOut;&amp;#xA;                    }&amp;#xA;                    catch&amp;#xA;                    {       &amp;#xA;                        $guidstr        = $ProcessContainer.Substring($ProcessContainer.Length - 32);&amp;#xA;                        $currentblockid = [Guid]::Parse($guidstr).ToString();  &amp;#xA;                        $errormes       = &amp;quot;Error in output parameters: &amp;quot; + $_.Exception.Message;  &amp;#xA;                        try {&amp;#xA;                            $othermsg = $_.InvocationInfo.Line.Trim();&amp;#xA;                            if(-not $othermsg.StartsWith(&amp;quot;throw&amp;quot;)) {&amp;#xA;                                $errormes += &amp;quot; : &amp;quot; + $othermsg; &amp;#xA;                            }&amp;#xA;                        }&amp;#xA;                        catch { }&amp;#xA;                        Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlock&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormes&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;                        $script:__ScriptAborted = $true;&amp;#xA;                        $script:__NextBlockID = &amp;quot;&amp;quot;;   &amp;#xA;                        $script:__LastBlockID = $currentblockid;&amp;#xA;                        return;&amp;#xA;                    }&amp;#xA;                }                        &amp;#xA;            }&amp;#xA;        } &amp;#xA;    }&amp;#xA;    catch{} &amp;#xA;    $script:__LastBlockID = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;}               &amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="32"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Записать в лог" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable1" Tooltip="[Переменная] Имя первой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression1" Tooltip="[Любой тип данных] Новое значение первой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Значение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable2" Tooltip="[Переменная] Имя второй переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Любой тип данных] Новое значение второй переменной. Свойство игнорируется, если не задано имя второй переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Значение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable3" Tooltip="[Переменная] Имя третьей переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Любой тип данных] Новое значение третьей переменной. Свойство игнорируется, если не задано имя третьей переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Значение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable4" Tooltip="[Переменная] Имя четвертой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Любой тип данных] Новое значение четвертой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Значение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable5" Tooltip="[Переменная] Имя пятой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Любой тип данных] Новое значение пятой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Значение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="AnyDataType" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Логировать в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Скриншот в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>685</Left>
      <Top>1145</Top>
      <Width>100</Width>
      <Height>100</Height>
      <ID>cc70a2b0-19a0-435b-b1bd-fefcfe12c875</ID>
      <zIndex>16</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Постобработка конфига" InternalName="InvokeExpression" FriendlyName="Выполнение одного или нескольких выражений на языке, совместимом с PowerShell. Выражения записываются без кавычек" Width="100" Height="100" PathToImage="ExternalToolboxes\Image\ico_Invoke Expression.png" PathToToolboxImage="" ImageType="TopImage" NoDelete="False" Invisible="False" Proportional="True" Version="66" LinuxAvailable="True" Code="&amp;#xA;function InvokeExpression{{{block_id}}}&amp;#xA;{      &amp;#xA;    try&amp;#xA;    {  &amp;#xA;        $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;); &amp;#xA;        $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;);&amp;#xA;        try&amp;#xA;        { &amp;#xA;            {{{Expression1}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression1: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression2}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression2: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression3}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression3: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression4}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression4: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression5}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression5: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; if($__Error.CheckException($errormessage)) {return;} }&amp;#xA;    }&amp;#xA;    catch { }&amp;#xA;        &amp;#xA;&amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FFDADADA" ProtoName="" Language="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF252525&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="16"&gt;&lt;Property Name="Expression1" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="$out_Config[&amp;quot;col_selector_match&amp;quot;] = $out_Config[&amp;quot;col_selector_match&amp;quot;] | ConvertFrom-Json" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 6" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 7" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 8" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 9" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Expression" EnumVariants="{x:Null}" Caption="Выражение 10" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
  </DesignerItems>
  <Connections>
    <Connection>
      <SourceID>86f986ca-4deb-4a12-9c88-157c7019b26d</SourceID>
      <SinkID>89dbff24-b106-4297-8539-28d6f821ddaa</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>1</zIndex>
    </Connection>
    <Connection>
      <SourceID>89dbff24-b106-4297-8539-28d6f821ddaa</SourceID>
      <SinkID>41b58bea-54f3-4b88-a3cb-5527cf8afa45</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>7</zIndex>
    </Connection>
    <Connection>
      <SourceID>05f4650d-7bb2-454d-890f-3a2d300c3f50</SourceID>
      <SinkID>f341eca0-0a70-442a-b977-439e47ceb937</SinkID>
      <SourceConnectorName>Yes</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>6</zIndex>
    </Connection>
    <Connection>
      <SourceID>05f4650d-7bb2-454d-890f-3a2d300c3f50</SourceID>
      <SinkID>059aa3c2-aaf4-4825-9dd3-1c927b79a8ea</SinkID>
      <SourceConnectorName>No</SourceConnectorName>
      <SinkConnectorName>InOut</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>3</zIndex>
    </Connection>
    <Connection>
      <SourceID>059aa3c2-aaf4-4825-9dd3-1c927b79a8ea</SourceID>
      <SinkID>41b58bea-54f3-4b88-a3cb-5527cf8afa45</SinkID>
      <SourceConnectorName>InOut</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>13</zIndex>
    </Connection>
    <Connection>
      <SourceID>f341eca0-0a70-442a-b977-439e47ceb937</SourceID>
      <SinkID>059aa3c2-aaf4-4825-9dd3-1c927b79a8ea</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>InOut</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>4</zIndex>
    </Connection>
    <Connection>
      <SourceID>41b58bea-54f3-4b88-a3cb-5527cf8afa45</SourceID>
      <SinkID>05f4650d-7bb2-454d-890f-3a2d300c3f50</SinkID>
      <SourceConnectorName>Row</SourceConnectorName>
      <SinkConnectorName>InputLeft</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>10</zIndex>
    </Connection>
    <Connection>
      <SourceID>41b58bea-54f3-4b88-a3cb-5527cf8afa45</SourceID>
      <SinkID>cc70a2b0-19a0-435b-b1bd-fefcfe12c875</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>11</zIndex>
    </Connection>
    <Connection>
      <SourceID>cc70a2b0-19a0-435b-b1bd-fefcfe12c875</SourceID>
      <SinkID>28b58ffc-a6c2-4c5d-9f10-3768380dabd3</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>15</zIndex>
    </Connection>
  </Connections>
  <Properties>
    <DiagramProperty Name="out_Config" Type="Hashtable" IsGlobal="False" DefaultValue="AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AAAAAAoKAwAAAAkCAAAACQMAAAAQAgAAAAAAAAAQAwAAAAAAAAAL" Value="AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AAAAAAoKAwAAAAkCAAAACQMAAAAQAgAAAAAAAAAQAwAAAAAAAAAL" />
  </Properties>
</Root>